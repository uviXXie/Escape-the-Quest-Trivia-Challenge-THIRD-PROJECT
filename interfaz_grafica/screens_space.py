import pygame
import constantes
from gallina import Gallina
from obstaculos import Obstaculos
from fondo import Background
import sys
from screen_manager import Screen
from screens_city import scale_img
# Definimos la función scale_img


# class StartScreen(Screen):
#     def __init__(self, screen_manager):
#         self.screen_manager = screen_manager

#     def handle_events(self, events):
#         for event in events:
#             if event.type == pygame.QUIT:
#                 pygame.quit()
#                 sys.exit()
#             elif event.type == pygame.KEYDOWN:
#                 if event.key == pygame.K_RETURN:
#                     # Transición a la pantalla de nivel fácil
#                     self.screen_manager.set_current_screen("farm_easy")
                    

#     def render(self, screen):
#         screen.fill((255, 255, 255))
#         font = pygame.font.Font(None, 74)
#         text = font.render("Press ENTER to Start", True, (0, 0, 0))
#         screen.blit(text, (constantes.WIDHT_SCREEN // 2 - text.get_width() // 2,
#                            constantes.HEIGHT_SCREEN // 2 - text.get_height() // 2))




class SpaceEasyScreen(Screen):
    """
    The 'SpaceEasyScreen' class represents the easy difficulty level of the space-themed game screen.

    Attributes:
        screen_manager (ScreenManager): The screen manager responsible for managing different game screens.
        background (Background): The background object that is drawn on the screen.
        player (Gallina): The player's character (chicken) on the screen.
        nave_obstacle (Obstaculos): Various obstacles (spaceships) that the player must avoid.
        move_up (bool): Boolean that determines if the player is moving upwards.
        move_down (bool): Boolean that determines if the player is moving downwards.
        move_left (bool): Boolean that determines if the player is moving left.
        move_right (bool): Boolean that determines if the player is moving right.
    """

    def __init__(self, screen_manager):
        """
        Initializes the SpaceEasyScreen with the background, player, and obstacles.

        Args:
            screen_manager (ScreenManager): The screen manager to manage screen transitions.
        """
        self.screen_manager = screen_manager
        bg = pygame.image.load("interfaz_grafica/assets/images/scenarios/space.png")
        self.background = Background(bg)

        animations = [
            scale_img(pygame.image.load(f"interfaz_grafica/assets/images/characters/gallina/chicken({i}).png"), constantes.SCALA_CHARACTER)
            for i in range(4)
        ]
        self.player = Gallina(400, 40, animations)

        nave_image = scale_img(pygame.image.load("interfaz_grafica/assets/images/obstacles/nave.png"), constantes.SCALA_NAVE_EASY)
        self.nave_obstacle = Obstaculos(0, 90, nave_image, 5, constantes.NAVE_WIDTH_EASY, constantes.NAVE_HEIGHT_EASY)
        self.nave_obstacle_2 = Obstaculos(200, 220, nave_image, 7, constantes.NAVE_WIDTH_EASY, constantes.NAVE_HEIGHT_EASY)
        self.nave_obstacle_3 = Obstaculos(760, 320, nave_image, 8, constantes.NAVE_WIDTH_EASY, constantes.NAVE_HEIGHT_EASY)
        self.move_up = self.move_down = self.move_left = self.move_right = False

    def handle_events(self, events):
        """
        Handles user input events, including quitting the game or moving the player.

        Args:
            events (list): A list of events generated by Pygame.
        """
        for event in events:
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                self.handle_keydown(event.key)
            elif event.type == pygame.KEYUP:
                self.handle_keyup(event.key)

    def handle_keydown(self, key):
        """
        Updates the movement state when a key is pressed.

        Args:
            key (int): The key that was pressed.
        """
        if key in (pygame.K_a, pygame.K_LEFT):
            self.move_left = True
        if key in (pygame.K_d, pygame.K_RIGHT):
            self.move_right = True
        if key in (pygame.K_w, pygame.K_UP):
            self.move_up = True
        if key in (pygame.K_s, pygame.K_DOWN):
            self.move_down = True

    def handle_keyup(self, key):
        """
        Updates the movement state when a key is released.

        Args:
            key (int): The key that was released.
        """
        if key in (pygame.K_a, pygame.K_LEFT):
            self.move_left = False
        if key in (pygame.K_d, pygame.K_RIGHT):
            self.move_right = False
        if key in (pygame.K_w, pygame.K_UP):
            self.move_up = False
        if key in (pygame.K_s, pygame.K_DOWN):
            self.move_down = False

    def update(self):
        """
        Updates the game state, including the player's position and obstacle movements, 
        and checks for collisions with obstacles.

        If the player collides with an obstacle, the screen transitions to the "game_over" screen. 
        If the player reaches the bottom of the screen, it transitions to the next level.
        """
        # Movimiento del jugador
        delta_x, delta_y = 0, 0
        if self.move_right:
            delta_x = 5
        if self.move_left:
            delta_x = -5
        if self.move_up:
            delta_y = -5
        if self.move_down:
            delta_y = 5

        self.player.movement(delta_x, delta_y)
        self.player.update()

        # Movimiento de obstáculos
        self.nave_obstacle.update()
        self.nave_obstacle_2.update()
        self.nave_obstacle_3.update()

        # Detección de colisiones
        if ((self.player.shape.colliderect(self.nave_obstacle.shape) or
             self.player.shape.colliderect(self.nave_obstacle_2.shape) or
             self.player.shape.colliderect(self.nave_obstacle_3.shape))):
            self.screen_manager.set_current_screen("game_over")

        # Transition to the next level when player reaches the bottom of the screen
        if self.player.shape.bottom >= constantes.HEIGHT_SCREEN:
            self.screen_manager.set_current_screen("space_hard")

    def render(self, screen):
        """
        Draws the current game state to the screen.

        Args:
            screen (pygame.Surface): The surface on which to draw the game elements.
        """
        # Dibujar el fondo
        self.background.draw(screen)
        # Dibujar el jugador
        self.player.draw(screen)
        # Dibujar obstáculos
        self.nave_obstacle.draw(screen)
        self.nave_obstacle_2.draw(screen)
        self.nave_obstacle_3.draw(screen)


class SpaceHardScreen(Screen):
    """
    The 'SpaceHardScreen' class represents the hard difficulty level of the space-themed game screen.

    Attributes:
        screen_manager (ScreenManager): The screen manager responsible for managing different game screens.
        background (Background): The background object that is drawn on the screen.
        player (Gallina): The player's character (chicken) on the screen.
        nave_obstacle (Obstaculos): Various obstacles (spaceships) that the player must avoid.
        move_up (bool): Boolean that determines if the player is moving upwards.
        move_down (bool): Boolean that determines if the player is moving downwards.
        move_left (bool): Boolean that determines if the player is moving left.
        move_right (bool): Boolean that determines if the player is moving right.
    """

    def __init__(self, screen_manager):
        """
        Initializes the SpaceHardScreen with the background, player, and obstacles.

        Args:
            screen_manager (ScreenManager): The screen manager to manage screen transitions.
        """
        self.screen_manager = screen_manager
        bg = pygame.image.load("interfaz_grafica/assets/images/scenarios/space.png")
        self.background = Background(bg)

        animations = [
            scale_img(pygame.image.load(f"interfaz_grafica/assets/images/characters/gallina/chicken({i}).png"), constantes.SCALA_CHARACTER)
            for i in range(4)
        ]
        self.player = Gallina(400, 40, animations)

        nave_image = scale_img(pygame.image.load("interfaz_grafica/assets/images/obstacles/nave.png"), constantes.SCALA_NAVE_HARD)
        self.nave_obstacle = Obstaculos(0, 90, nave_image, 5, constantes.NAVE_WIDTH_HARD, constantes.NAVE_HEIGHT_HARD)
        self.nave_obstacle_2 = Obstaculos(200, 220, nave_image, 7, constantes.NAVE_WIDTH_HARD, constantes.NAVE_HEIGHT_HARD)
        self.nave_obstacle_3 = Obstaculos(760, 320, nave_image, 8, constantes.NAVE_WIDTH_HARD, constantes.NAVE_HEIGHT_HARD)
        self.nave_obstacle_4 = Obstaculos(400, 150, nave_image, 6, constantes.NAVE_WIDTH_HARD, constantes.NAVE_HEIGHT_HARD)
        self.nave_obstacle_5 = Obstaculos(600, 270, nave_image, 9, constantes.NAVE_WIDTH_HARD, constantes.NAVE_HEIGHT_HARD)
        self.nave_obstacle_6 = Obstaculos(800, 400, nave_image, 7, constantes.NAVE_WIDTH_HARD, constantes.NAVE_HEIGHT_HARD)

        self.move_up = self.move_down = self.move_left = self.move_right = False

    def handle_events(self, events):
        """
        Handles user input events, including quitting the game or moving the player.

        Args:
            events (list): A list of events generated by Pygame.
        """
        for event in events:
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    pygame.quit()
                    sys.exit()
                self.handle_keydown(event.key)
            elif event.type == pygame.KEYUP:
                self.handle_keyup(event.key)

    def handle_keydown(self, key):
        """
        Updates the movement state when a key is pressed.

        Args:
            key (int): The key that was pressed.
        """
        if key in (pygame.K_a, pygame.K_LEFT):
            self.move_left = True
        if key in (pygame.K_d, pygame.K_RIGHT):
            self.move_right = True
        if key in (pygame.K_w, pygame.K_UP):
            self.move_up = True
        if key in (pygame.K_s, pygame.K_DOWN):
            self.move_down = True

    def handle_keyup(self, key):
        """
        Updates the movement state when a key is released.

        Args:
            key (int): The key that was released.
        """
        if key in (pygame.K_a, pygame.K_LEFT):
            self.move_left = False
        if key in (pygame.K_d, pygame.K_RIGHT):
            self.move_right = False
        if key in (pygame.K_w, pygame.K_UP):
            self.move_up = False
        if key in (pygame.K_s, pygame.K_DOWN):
            self.move_down = False

    def update(self):
        """
        Updates the game state, including the player's position and obstacle movements, 
        and checks for collisions with obstacles.

        If the player collides with an obstacle, the screen transitions to the "game_over" screen. 
        If the player reaches the bottom of the screen, it transitions to the next level.
        """
        # Movimiento del jugador
        delta_x, delta_y = 0, 0
        if self.move_right:
            delta_x = 5
        if self.move_left:
            delta_x = -5
        if self.move_up:
            delta_y = -5
        if self.move_down:
            delta_y = 5

        self.player.movement(delta_x, delta_y)
        self.player.update()

        # Movimiento de obstáculos
        self.nave_obstacle.update()
        self.nave_obstacle_2.update()
        self.nave_obstacle_3.update()
        self.nave_obstacle_4.update()
        self.nave_obstacle_5.update()
        self.nave_obstacle_6.update()

        # Detección de colisiones
        if ((self.player.shape.colliderect(self.nave_obstacle.shape) or
             self.player.shape.colliderect(self.nave_obstacle_2.shape) or
             self.player.shape.colliderect(self.nave_obstacle_3.shape) or
             self.player.shape.colliderect(self.nave_obstacle_4.shape) or
             self.player.shape.colliderect(self.nave_obstacle_5.shape) or
             self.player.shape.colliderect(self.nave_obstacle_6.shape))):
            self.screen_manager.set_current_screen("game_over")

        # Transition to the next level when player reaches the bottom of the screen
        if self.player.shape.bottom >= constantes.HEIGHT_SCREEN:
            self.screen_manager.set_current_screen("blank_screen")

    def render(self, screen):
        """
        Draws the current game state to the screen.

        Args:
            screen (pygame.Surface): The surface on which to draw the game elements.
        """
        # Dibujar el fondo
        self.background.draw(screen)
        # Dibujar el jugador
        self.player.draw(screen)
        # Dibujar obstáculos
        self.nave_obstacle.draw(screen)
        self.nave_obstacle_2.draw(screen)
        self.nave_obstacle_3.draw(screen)
        self.nave_obstacle_4.draw(screen)
        self.nave_obstacle_5.draw(screen)
        self.nave_obstacle_6.draw(screen)
